import asyncio
import aiohttp
from aiogram import Bot

# –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
BOT_TOKEN = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ").strip()
TARGET_USER_ID = int(input("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ").strip())

API_BASE = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã Premium –≤ –∑–≤—ë–∑–¥–∞—Ö
PREMIUM_PRICE = {3: 1000, 6: 1500, 12: 2500}

async def call_raw_api(method: str, payload: dict | None = None):
    """–í—ã–∑–æ–≤ Bot API –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –≤ SDK."""
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_BASE}/{method}", json=payload or {}) as resp:
            data = await resp.json()
            if not data.get("ok"):
                raise RuntimeError(f"{method} failed: {data}")
            return data["result"]

async def fetch_star_balance(bot: Bot) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –±–æ—Ç–∞ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ SDK, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)."""
    balance_info = await bot.get_my_star_balance()
    return getattr(balance_info, "amount", 0)

async def fetch_available_gifts() -> list[dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏-—Å—Ç–∏–∫–µ—Ä—ã —á–µ—Ä–µ–∑ Bot API."""
    result = await call_raw_api("getAvailableGifts")
    gifts = []
    for g in result.get("gifts", []):
        gifts.append({
            "id": g["id"],
            "type": "—Å—Ç–∏–∫–µ—Ä",
            "name": g["sticker"]["emoji"],
            "price": g["star_count"],
        })
    return gifts

async def send_gift_sticker(gift_id: str | int, user_id: int, text: str | None = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫-—Å—Ç–∏–∫–µ—Ä —á–µ—Ä–µ–∑ Bot API."""
    payload = {
        "gift_id": gift_id,
        "user_id": user_id,
    }
    if text:
        payload["text"] = text
    return await call_raw_api("sendGift", payload)

async def main():
    bot = Bot(token=BOT_TOKEN)

    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        me = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: @{me.username}")

        # –ë–∞–ª–∞–Ω—Å
        print("üåü –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥...")
        stars_balance = await fetch_star_balance(bot)
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {stars_balance} ‚≠ê")

        # –ü—Ä–µ–º–∏—É–º (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ 3/6/12 –º–µ—Å.)
        premium_options = [
            {"id": months, "type": "Premium", "name": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å.", "price": PREMIUM_PRICE[months]}
            for months in (3, 6, 12)
        ]

        # –ü–æ–¥–∞—Ä–∫–∏-—Å—Ç–∏–∫–µ—Ä—ã –∏–∑ API
        print("üéÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏...")
        try:
            sticker_gifts = await fetch_available_gifts()
        except Exception as e:
            print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–∫–∏-—Å—Ç–∏–∫–µ—Ä—ã: {e}")
            sticker_gifts = []

        available_options = premium_options + sticker_gifts
        if not available_options:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –ø–æ–¥–∞—Ä–∫–æ–≤.")
            return

        # –í—ã–≤–æ–¥
        print("\n‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:")
        for opt in available_options:
            afford = "‚úÖ —Ö–≤–∞—Ç–∞–µ—Ç" if stars_balance >= opt["price"] else "‚ùå –º–∞–ª–æ –∑–≤—ë–∑–¥"
            print(f"- ID: {opt['id']} | {opt['type']}: {opt['name']} | –¶–µ–Ω–∞: {opt['price']} ‚≠ê | {afford}")

        # –í—ã–±–æ—Ä
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ ID –æ–ø—Ü–∏–∏ (3/6/12 –¥–ª—è Premium –∏–ª–∏ ID –ø–æ–¥–∞—Ä–∫–∞-—Å—Ç–∏–∫–µ—Ä–∞): ").strip()
        selected = next((o for o in available_options if str(o["id"]) == choice), None)
        if not selected:
            print("‚ùå –¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç.")
            return

        if stars_balance < selected["price"]:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥. –ù—É–∂–Ω–æ: {selected['price']} ‚≠ê, –¥–æ—Å—Ç—É–ø–Ω–æ: {stars_balance} ‚≠ê.")
            return

        # –ü–æ–∫—É–ø–∫–∞
        print(f"‚è≥ –ü–æ–∫—É–ø–∞–µ–º {selected['type']} {selected['name']}...")
        if selected["type"] == "Premium":
            months = int(selected["id"])
            star_count = PREMIUM_PRICE[months]
            ok = await bot.gift_premium_subscription(
                user_id=TARGET_USER_ID,
                month_count=months,
                star_count=star_count,
                text=f"by tukasha"
            )
            if ok:
                print("üéâ Premium —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–µ–Ω!")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Premium.")
        else:
            result = await send_gift_sticker(
                gift_id=selected["id"],
                user_id=TARGET_USER_ID,
                text="by tukasha"
            )
            print(f"üéâ –°—Ç–∏–∫–µ—Ä-–ø–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    while True: asyncio.run(main())